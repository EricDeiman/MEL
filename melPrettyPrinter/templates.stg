//
//  The MEL programming language
//  Copyright 2015 Eric J. Deiman
//
//  This file is part of the MEL programming language.
//  The MEL programming language is free software: you can redistribute it
//  and/ormodify it under the terms of the GNU General Public License as published by the
//  Free Software Foundation, either version 3 of the License, or (at your option) any
//  later version.
//
//  The MEL programming language is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
//  You should have received a copy of the GNU General Public License along with the
//  MEL programming language. If not, see <https://www.gnu.org/licenses/>
//

binop(lhs, op, rhs) ::= "(<op> <lhs> <rhs>)"
varFormat(var, type) ::= "(<var>:<type>)"
formalFormat(formal) ::= "<formal;separator=\" \">"
printStmnt(e) ::= "(print <e>)"
assignStmnt(id, value) ::= "(assign <id> <value>)"
arrayAssignStmnt(id, index, value) ::= "(assign <id> <index> <value>)"
lengthExp(obj) ::= "(length <obj>)"
funcCall(function, params) ::= "(call <function> <params>)"
arrayLookup(obj, index) ::= "(lookup <obj> <index>)"
notExp(e) ::= "(not <e>)"
newArray(type, size) ::= "(create-array-<type> <size>)"
idType(id, type) ::= "<id>:<type>"

//------------------------------------------
statementList(stmnt) ::=
<<<if(stmnt)><stmnt; separator="
"><endif> >>

//----------------------------------------
varStmnt(idType,expr) ::=
<<(define <idType> <if(expr)>(<expr>)<endif>)>>

//----------------------------------------
compUnit(main, functions) ::= <<(compUnit
<main>
<functions; separator="
">
)

>>

//---------------------------------------
mainDecl(arg, body) ::= <<
(define main:integer (<arg>:string[])
(<if(body)><body>
<endif>
)
)

>>

//-----------------------------------------
funcDecl(id, formals, type, stmnts) ::=
<<(define <id>:<type> (<formals>)
(<if(stmnts)><stmnts>
<endif>
)
)

>>

//-------------------------------------------
block(varDecl, stmnt) ::=
<<
(block
<varDecl>
<stmnt>
)
>>

//------------------------------------------
ifStmnt(cond, cons, alt) ::=
<<
(if (<cond>)
<cons>
<if(alt)><alt><endif>
)
>>

//--------------------------------------------
returnStmnt(exp) ::=
<<
(return <if(exp)><exp><endif>)
>>

//--------------------------------------------
whileStmnt(cond, stmnts) ::=
<<
(while (<cond>)
<if(stmnts)><stmnts><endif>
)
>>